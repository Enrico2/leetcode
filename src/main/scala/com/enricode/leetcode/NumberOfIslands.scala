package com.enricode.leetcode

import com.enricode.util.{LeetcodeApp, Util}
import scala.collection.mutable

/**
  * https://leetcode.com/problems/number-of-islands/description/
  */
object NumberOfIslands extends LeetcodeApp {
  override def run(): Unit = {
    val a = Array(
      Array(1, 1, 0, 0, 0),
      Array(1, 1, 0, 0, 0),
      Array(0, 0, 1, 0, 0),
      Array(0, 0, 0, 1, 1)).map(_.map(_.toChar))

    val a2 = Array(
      Array(1, 1, 1, 1, 0),
      Array(1, 1, 0, 1, 0),
      Array(1, 1, 0, 0, 0),
      Array(0, 0, 0, 0, 0)).map(_.map(_.toChar))

    val a3 = Array(
      Array('1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '0', '1', '1'),
      Array('0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '0'),
      Array('1', '0', '1', '1', '1', '0', '0', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'),
      Array('1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'),
      Array('1', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'),
      Array('1', '0', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1'),
      Array('0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1', '1', '1'),
      Array('1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1'),
      Array('1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1'),
      Array('1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'),
      Array('0', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'),
      Array('1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'),
      Array('1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'),
      Array('1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1'),
      Array('1', '0', '1', '1', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1', '1'),
      Array('1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '0'),
      Array('1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '0'),
      Array('1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'),
      Array('1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'),
      Array('1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'))

    println(numIslands(a3))
  }

  def numIslands(grid: Array[Array[Char]]): Int = {
    val n = grid.length
    val m = grid(0).length
    val visited = Array.ofDim[Boolean](n, m)
    var ans = 0

    val ds = Seq((1, 0), (-1, 0), (0, 1), (0, -1))

    def discover(i: Int, j: Int) = {
      val q = new mutable.Queue[(Int, Int)]()
      q.enqueue((i, j))
      visited(i)(j) = true

      while (q.nonEmpty) {
        val (i, j) = q.dequeue()
        ds.foreach { case (di, dj) =>
          val ni = i + di
          val nj = j + dj
          if (Util.inBounds(ni, n) && Util.inBounds(nj, m) && grid(ni)(nj) == '1' && !visited(ni)(nj)) {
            q.enqueue((ni, nj))
            visited(ni)(nj) = true
          }
        }
      }
      ans += 1
    }

    for (i <- 0 until n) {
      for (j <- 0 until m) {
        if (!visited(i)(j)) {
          if (grid(i)(j) == '1') {
            discover(i, j)
          }
        }
      }
    }

    ans
  }
}
